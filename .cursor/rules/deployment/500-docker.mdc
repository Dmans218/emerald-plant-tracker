---
description: Docker containerization and deployment standards for Emerald Plant Tracker
globs: Dockerfile, docker-compose.yml, backend/Dockerfile, frontend/Dockerfile, .dockerignore
alwaysApply: false
---

# Docker & Deployment Standards

## Container Architecture
- **Multi-stage builds** for optimized production images
- **Single unified container** combining frontend and backend
- **Node.js 22 Alpine base image** for consistency and minimal size
- **Non-root user** for security (node user)
- **Health checks** for container monitoring

## Build Process
1. **Frontend Build Stage**: React production build
2. **Backend Stage**: Express server with static files
3. **Final Stage**: Minimal production image
4. **Static File Serving**: Frontend served by Express

## Port Configuration
- **Port 420**: Application port (cannabis-themed)
- **Environment Variable**: `PORT=420` for flexibility
- **Health Check**: HTTP GET on localhost:420/

## Data Persistence
- **SQLite Database**: `/app/backend/data` volume mount
- **File Uploads**: `/app/backend/uploads` volume mount
- **Docker Volumes**: Named volumes for data persistence
- **Backup Strategy**: Volume backup for data protection

## Environment Variables
```dockerfile
ENV PORT=420
ENV NODE_ENV=production
```

## Docker Compose Structure
```yaml
services:
  emerald-plant-tracker:
    image: dmans218/emerald-plant-tracker:latest
    container_name: emerald-plant-tracker
    ports:
      - 420:420
    volumes:
      - emerald_data:/app/backend/data
      - emerald_uploads:/app/backend/uploads
    environment:
      - NODE_ENV=production
    restart: unless-stopped
```

## Security Best Practices
- **Non-root execution**: Run as node user (UID 1000)
- **Minimal attack surface**: Only necessary packages
- **Security scanning**: Regular vulnerability checks
- **No secrets in image**: Use environment variables
- **Read-only filesystem**: Where possible

## Performance Optimization
- **Layer caching**: Optimize Dockerfile layer order
- **Multi-stage builds**: Minimize final image size
- **Node modules**: Efficient npm ci installation
- **Static file compression**: Nginx-style serving

## Deployment Patterns
- **Development**: docker-compose.dev.yml with hot reload
- **Production**: Single container with built assets
- **Self-hosted**: Easy deployment with docker run
- **Privacy-focused**: No external dependencies

## Cannabis Legal Compliance
- **Self-hosted only**: No cloud deployment by default
- **Data sovereignty**: All data stays local
- **Privacy by design**: No external API calls
- **Audit trail**: Container logs for compliance

## Monitoring & Maintenance
- **Health checks**: Container health monitoring
- **Log rotation**: Prevent disk space issues
- **Update strategy**: Rolling updates with data preservation
- **Backup automation**: Regular data backup procedures
