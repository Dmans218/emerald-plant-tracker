{"ast":null,"code":"import Tesseract from 'tesseract.js';\n\n// Parse environmental data from Spider Farmer app screenshot\nexport const parseSpiderFarmerScreenshot = async imageFile => {\n  try {\n    const {\n      data: {\n        text\n      }\n    } = await Tesseract.recognize(imageFile, 'eng', {\n      logger: m => console.log(m)\n    });\n    console.log('OCR Text:', text);\n\n    // Initialize result object\n    const result = {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      parsedValues: {}\n    };\n\n    // Parse Air Temperature (looking for patterns like \"21.7°C\" or \"21.7 °C\")\n    const tempMatch = text.match(/(\\d+\\.?\\d*)\\s*[°º]\\s*[cC]/i);\n    if (tempMatch) {\n      result.temperature = parseFloat(tempMatch[1]);\n      result.parsedValues.temperature = `${tempMatch[1]}°C`;\n    }\n\n    // Parse Humidity (looking for patterns like \"78.1%\" or \"78.1 %\")\n    const humidityMatch = text.match(/(\\d+\\.?\\d*)\\s*%/);\n    if (humidityMatch) {\n      result.humidity = parseFloat(humidityMatch[1]);\n      result.parsedValues.humidity = `${humidityMatch[1]}%`;\n    }\n\n    // Parse VPD (looking for patterns like \"0.57 kPa\" or \"0.57kPa\")\n    const vpdMatch = text.match(/(\\d+\\.?\\d*)\\s*kPa/i);\n    if (vpdMatch) {\n      result.vpd = parseFloat(vpdMatch[1]);\n      result.parsedValues.vpd = `${vpdMatch[1]} kPa`;\n    }\n\n    // Parse CO2 (looking for patterns like \"400 ppm\" or numbers near \"CO2\")\n    const co2Match = text.match(/CO\\s*[₂2]?\\s*[:‐]?\\s*(\\d+)/i) || text.match(/(\\d+)\\s*ppm/i);\n    if (co2Match) {\n      result.co2 = parseFloat(co2Match[1]);\n      result.parsedValues.co2 = `${co2Match[1]} ppm`;\n    }\n\n    // Parse PPFD (looking for patterns like \"500 μmol\" or numbers near \"PPFD\")\n    const ppfdMatch = text.match(/PPFD\\s*[:‐]?\\s*(\\d+)/i) || text.match(/(\\d+)\\s*[μu]mol/i);\n    if (ppfdMatch) {\n      result.ppfd = parseFloat(ppfdMatch[1]);\n      result.parsedValues.ppfd = `${ppfdMatch[1]} μmol/m²/s`;\n    }\n\n    // Try to extract pH (might be shown as \"pH: 6.5\" or similar)\n    const phMatch = text.match(/pH\\s*[:‐]?\\s*(\\d+\\.?\\d*)/i);\n    if (phMatch) {\n      result.ph = parseFloat(phMatch[1]);\n      result.parsedValues.ph = phMatch[1];\n    }\n\n    // Check if we found at least one value\n    result.success = Object.values(result).some(val => val !== null && typeof val === 'number');\n    return result;\n  } catch (error) {\n    console.error('OCR Error:', error);\n    return {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      error: error.message,\n      parsedValues: {}\n    };\n  }\n};\n\n// Helper function to preprocess image for better OCR\nexport const preprocessImageForOCR = (canvas, context) => {\n  const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  // Convert to grayscale and increase contrast\n  for (let i = 0; i < data.length; i += 4) {\n    const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;\n\n    // Increase contrast (simple threshold)\n    const contrast = gray > 128 ? 255 : 0;\n    data[i] = contrast; // Red\n    data[i + 1] = contrast; // Green\n    data[i + 2] = contrast; // Blue\n  }\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n};\n\n// Parse different app layouts/formats\nexport const parseEnvironmentalData = async imageFile => {\n  // Try Spider Farmer format first\n  const spiderFarmerResult = await parseSpiderFarmerScreenshot(imageFile);\n  if (spiderFarmerResult.success) {\n    return {\n      ...spiderFarmerResult,\n      source: 'Spider Farmer App'\n    };\n  }\n\n  // Could add other app parsers here in the future\n  return {\n    ...spiderFarmerResult,\n    source: 'Unknown',\n    message: 'Could not parse environmental data from image. Please ensure the image shows clear readings from a supported app.'\n  };\n};","map":{"version":3,"names":["Tesseract","parseSpiderFarmerScreenshot","imageFile","data","text","recognize","logger","m","console","log","result","temperature","humidity","ph","co2","vpd","ppfd","success","parsedValues","tempMatch","match","parseFloat","humidityMatch","vpdMatch","co2Match","ppfdMatch","phMatch","Object","values","some","val","error","message","preprocessImageForOCR","canvas","context","imageData","getImageData","width","height","i","length","gray","contrast","putImageData","toDataURL","parseEnvironmentalData","spiderFarmerResult","source"],"sources":["/home/dmans218/projects/Growlogger/frontend/src/utils/ocrParser.js"],"sourcesContent":["import Tesseract from 'tesseract.js';\n\n// Parse environmental data from Spider Farmer app screenshot\nexport const parseSpiderFarmerScreenshot = async (imageFile) => {\n  try {\n    const { data: { text } } = await Tesseract.recognize(imageFile, 'eng', {\n      logger: m => console.log(m)\n    });\n\n    console.log('OCR Text:', text);\n\n    // Initialize result object\n    const result = {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      parsedValues: {}\n    };\n\n    // Parse Air Temperature (looking for patterns like \"21.7°C\" or \"21.7 °C\")\n    const tempMatch = text.match(/(\\d+\\.?\\d*)\\s*[°º]\\s*[cC]/i);\n    if (tempMatch) {\n      result.temperature = parseFloat(tempMatch[1]);\n      result.parsedValues.temperature = `${tempMatch[1]}°C`;\n    }\n\n    // Parse Humidity (looking for patterns like \"78.1%\" or \"78.1 %\")\n    const humidityMatch = text.match(/(\\d+\\.?\\d*)\\s*%/);\n    if (humidityMatch) {\n      result.humidity = parseFloat(humidityMatch[1]);\n      result.parsedValues.humidity = `${humidityMatch[1]}%`;\n    }\n\n    // Parse VPD (looking for patterns like \"0.57 kPa\" or \"0.57kPa\")\n    const vpdMatch = text.match(/(\\d+\\.?\\d*)\\s*kPa/i);\n    if (vpdMatch) {\n      result.vpd = parseFloat(vpdMatch[1]);\n      result.parsedValues.vpd = `${vpdMatch[1]} kPa`;\n    }\n\n    // Parse CO2 (looking for patterns like \"400 ppm\" or numbers near \"CO2\")\n    const co2Match = text.match(/CO\\s*[₂2]?\\s*[:‐]?\\s*(\\d+)/i) || \n                     text.match(/(\\d+)\\s*ppm/i);\n    if (co2Match) {\n      result.co2 = parseFloat(co2Match[1]);\n      result.parsedValues.co2 = `${co2Match[1]} ppm`;\n    }\n\n    // Parse PPFD (looking for patterns like \"500 μmol\" or numbers near \"PPFD\")\n    const ppfdMatch = text.match(/PPFD\\s*[:‐]?\\s*(\\d+)/i) ||\n                      text.match(/(\\d+)\\s*[μu]mol/i);\n    if (ppfdMatch) {\n      result.ppfd = parseFloat(ppfdMatch[1]);\n      result.parsedValues.ppfd = `${ppfdMatch[1]} μmol/m²/s`;\n    }\n\n    // Try to extract pH (might be shown as \"pH: 6.5\" or similar)\n    const phMatch = text.match(/pH\\s*[:‐]?\\s*(\\d+\\.?\\d*)/i);\n    if (phMatch) {\n      result.ph = parseFloat(phMatch[1]);\n      result.parsedValues.ph = phMatch[1];\n    }\n\n    // Check if we found at least one value\n    result.success = Object.values(result).some(val => val !== null && typeof val === 'number');\n\n    return result;\n  } catch (error) {\n    console.error('OCR Error:', error);\n    return {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      error: error.message,\n      parsedValues: {}\n    };\n  }\n};\n\n// Helper function to preprocess image for better OCR\nexport const preprocessImageForOCR = (canvas, context) => {\n  const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  // Convert to grayscale and increase contrast\n  for (let i = 0; i < data.length; i += 4) {\n    const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;\n    \n    // Increase contrast (simple threshold)\n    const contrast = gray > 128 ? 255 : 0;\n    \n    data[i] = contrast;     // Red\n    data[i + 1] = contrast; // Green\n    data[i + 2] = contrast; // Blue\n  }\n\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n};\n\n// Parse different app layouts/formats\nexport const parseEnvironmentalData = async (imageFile) => {\n  // Try Spider Farmer format first\n  const spiderFarmerResult = await parseSpiderFarmerScreenshot(imageFile);\n  \n  if (spiderFarmerResult.success) {\n    return {\n      ...spiderFarmerResult,\n      source: 'Spider Farmer App'\n    };\n  }\n\n  // Could add other app parsers here in the future\n  return {\n    ...spiderFarmerResult,\n    source: 'Unknown',\n    message: 'Could not parse environmental data from image. Please ensure the image shows clear readings from a supported app.'\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}