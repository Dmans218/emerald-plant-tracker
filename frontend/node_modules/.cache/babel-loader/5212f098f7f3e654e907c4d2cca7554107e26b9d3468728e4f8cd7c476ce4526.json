{"ast":null,"code":"import Tesseract from 'tesseract.js';\n\n// Parse environmental data from Spider Farmer app screenshot\nexport const parseSpiderFarmerScreenshot = async imageFile => {\n  try {\n    const {\n      data: {\n        text\n      }\n    } = await Tesseract.recognize(imageFile, 'eng', {\n      logger: m => console.log(m),\n      tessedit_char_whitelist: '0123456789.°C%kPa ppm μmol/s-+:VPDCOTemperatureHumidityAir '\n    });\n    console.log('OCR Raw Text:', text);\n\n    // Initialize result object\n    const result = {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      parsedValues: {}\n    };\n\n    // Clean text for better analysis\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    console.log('Text lines:', lines);\n\n    // Extract all numbers with context for smarter parsing\n    const numberPattern = /(\\d+\\.?\\d*)/g;\n    const allNumbers = [];\n    let match;\n    while ((match = numberPattern.exec(text)) !== null) {\n      const number = parseFloat(match[1]);\n      const index = match.index;\n      const contextBefore = text.substring(Math.max(0, index - 20), index).toLowerCase();\n      const contextAfter = text.substring(index, Math.min(text.length, index + 20)).toLowerCase();\n      allNumbers.push({\n        value: number,\n        text: match[1],\n        index: index,\n        contextBefore: contextBefore,\n        contextAfter: contextAfter,\n        fullContext: contextBefore + match[1] + contextAfter\n      });\n    }\n    console.log('Numbers with context:', allNumbers);\n\n    // Parse Temperature - look for temperature in proper range with °C\n    for (const num of allNumbers) {\n      if (!result.temperature && num.value >= 15 && num.value <= 40) {\n        const context = num.fullContext;\n        // Check if it's near temperature indicators and has degree symbol\n        if ((context.includes('temp') || context.includes('air')) && (context.includes('°') || context.includes('º')) && !context.includes('vpd') && !context.includes('%')) {\n          result.temperature = num.value;\n          result.parsedValues.temperature = `${num.value}°C`;\n          console.log('Found temperature:', num.value, 'Context:', context);\n          break;\n        }\n      }\n    }\n\n    // Parse Humidity - look for percentage values in humidity range\n    for (const num of allNumbers) {\n      if (!result.humidity && num.value >= 20 && num.value <= 100) {\n        const context = num.fullContext;\n        // Check if it's clearly marked as percentage or near humidity keywords\n        // Prioritize numbers that have % directly after them\n        const hasPercentage = context.includes('%');\n        const hasHumidityKeyword = context.includes('humid');\n        const notTemperature = !context.includes('°') && !context.includes('temp');\n        const notVPD = !context.includes('vpd') && !context.includes('kpa');\n        if (hasPercentage && notTemperature && notVPD) {\n          result.humidity = num.value;\n          result.parsedValues.humidity = `${num.value}%`;\n          console.log('Found humidity:', num.value, 'Context:', context);\n          break;\n        } else if (hasHumidityKeyword && notTemperature && notVPD) {\n          result.humidity = num.value;\n          result.parsedValues.humidity = `${num.value}%`;\n          console.log('Found humidity by keyword:', num.value, 'Context:', context);\n          break;\n        }\n      }\n    }\n\n    // Parse VPD - look for small decimal values with kPa context  \n    for (const num of allNumbers) {\n      if (!result.vpd && num.value >= 0.1 && num.value <= 5.0) {\n        const context = num.fullContext;\n        // VPD should be small decimal near \"VPD\" text or \"kPa\"\n        if (context.includes('vpd') || context.includes('kpa') && num.value < 10 || num.value < 2.0 && context.includes('kpa')) {\n          result.vpd = num.value;\n          result.parsedValues.vpd = `${num.value} kPa`;\n          console.log('Found VPD:', num.value, 'Context:', context);\n          break;\n        }\n      }\n    }\n\n    // Fallback parsing if direct context matching fails\n    if (!result.temperature || !result.humidity || !result.vpd) {\n      console.log('Using fallback parsing...');\n\n      // Sort numbers by value to help identify them\n      const sortedNumbers = [...allNumbers].sort((a, b) => a.value - b.value);\n      console.log('Sorted numbers:', sortedNumbers.map(n => n.value));\n\n      // If we don't have temperature, look for number around 20-25 (room temp)\n      if (!result.temperature) {\n        const tempCandidate = sortedNumbers.find(n => n.value >= 18 && n.value <= 30);\n        if (tempCandidate && !tempCandidate.fullContext.includes('%')) {\n          result.temperature = tempCandidate.value;\n          result.parsedValues.temperature = `${tempCandidate.value}°C`;\n          console.log('Fallback temperature:', tempCandidate.value);\n        }\n      }\n\n      // If we don't have humidity, look for numbers with % symbol, prioritizing higher values\n      if (!result.humidity) {\n        // First try to find numbers with % that are in typical humidity range (50-90%)\n        const humidCandidate = sortedNumbers.reverse().find(n => n.value >= 50 && n.value <= 100 && n.fullContext.includes('%') && !n.fullContext.includes('°') && !n.fullContext.includes('vpd') && !n.fullContext.includes('kpa'));\n\n        // If not found, try broader range (30-100%)\n        const humidCandidate2 = humidCandidate || sortedNumbers.find(n => n.value >= 30 && n.value <= 100 && n.fullContext.includes('%') && !n.fullContext.includes('°'));\n        if (humidCandidate || humidCandidate2) {\n          const candidate = humidCandidate || humidCandidate2;\n          result.humidity = candidate.value;\n          result.parsedValues.humidity = `${candidate.value}%`;\n          console.log('Fallback humidity:', candidate.value, 'Context:', candidate.fullContext);\n        }\n      }\n\n      // If we don't have VPD, look for small decimals\n      if (!result.vpd) {\n        const vpdCandidate = sortedNumbers.find(n => n.value >= 0.1 && n.value <= 2.0 && n.text.includes('.'));\n        if (vpdCandidate) {\n          result.vpd = vpdCandidate.value;\n          result.parsedValues.vpd = `${vpdCandidate.value} kPa`;\n          console.log('Fallback VPD:', vpdCandidate.value);\n        }\n      }\n    }\n\n    // Parse CO2 (ppm pattern)\n    let co2Match = text.match(/co\\s*[₂2]?\\s*[:-]?\\s*(\\d+)/i) || text.match(/(\\d+)\\s*ppm/i);\n\n    // Look for numbers in CO2 range\n    if (!co2Match && allNumbers.length > 0) {\n      for (const num of allNumbers) {\n        const val = parseFloat(num);\n        if (val >= 300 && val <= 2000) {\n          // Typical CO2 range\n          const numIndex = text.indexOf(num);\n          const surrounding = text.substring(Math.max(0, numIndex - 15), numIndex + 15).toLowerCase();\n          if (surrounding.includes('co2') || surrounding.includes('ppm')) {\n            co2Match = [null, num];\n            break;\n          }\n        }\n      }\n    }\n    if (co2Match) {\n      result.co2 = parseFloat(co2Match[1]);\n      result.parsedValues.co2 = `${co2Match[1]} ppm`;\n    }\n\n    // Parse PPFD (μmol pattern)\n    let ppfdMatch = text.match(/ppfd\\s*[:-]?\\s*(\\d+)/i) || text.match(/(\\d+)\\s*[μu]mol/i);\n\n    // Look for numbers in PPFD range\n    if (!ppfdMatch && allNumbers.length > 0) {\n      for (const num of allNumbers) {\n        const val = parseFloat(num);\n        if (val >= 100 && val <= 2000) {\n          // Typical PPFD range\n          const numIndex = text.indexOf(num);\n          const surrounding = text.substring(Math.max(0, numIndex - 15), numIndex + 15).toLowerCase();\n          if (surrounding.includes('ppfd') || surrounding.includes('μmol') || surrounding.includes('umol')) {\n            ppfdMatch = [null, num];\n            break;\n          }\n        }\n      }\n    }\n    if (ppfdMatch) {\n      result.ppfd = parseFloat(ppfdMatch[1]);\n      result.parsedValues.ppfd = `${ppfdMatch[1]} μmol/m²/s`;\n    }\n\n    // Parse pH\n    let phMatch = text.match(/ph\\s*[:-]?\\s*(\\d+\\.?\\d*)/i);\n    if (!phMatch && allNumbers.length > 0) {\n      for (const num of allNumbers) {\n        const val = parseFloat(num);\n        if (val >= 4.0 && val <= 9.0) {\n          // Typical pH range\n          const numIndex = text.indexOf(num);\n          const surrounding = text.substring(Math.max(0, numIndex - 10), numIndex + 10).toLowerCase();\n          if (surrounding.includes('ph')) {\n            phMatch = [null, num];\n            break;\n          }\n        }\n      }\n    }\n    if (phMatch) {\n      result.ph = parseFloat(phMatch[1]);\n      result.parsedValues.ph = phMatch[1];\n    }\n\n    // Check if we found at least one value\n    result.success = Object.values(result).some(val => val !== null && typeof val === 'number');\n    console.log('Parsed result:', result);\n    return result;\n  } catch (error) {\n    console.error('OCR Error:', error);\n    return {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      error: error.message,\n      parsedValues: {}\n    };\n  }\n};\n\n// Helper function to preprocess image for better OCR\nexport const preprocessImageForOCR = (canvas, context) => {\n  const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  // Convert to grayscale and increase contrast\n  for (let i = 0; i < data.length; i += 4) {\n    const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;\n\n    // Increase contrast (simple threshold)\n    const contrast = gray > 128 ? 255 : 0;\n    data[i] = contrast; // Red\n    data[i + 1] = contrast; // Green\n    data[i + 2] = contrast; // Blue\n  }\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n};\n\n// Parse different app layouts/formats\nexport const parseEnvironmentalData = async imageFile => {\n  // Try Spider Farmer format first\n  const spiderFarmerResult = await parseSpiderFarmerScreenshot(imageFile);\n  if (spiderFarmerResult.success) {\n    return {\n      ...spiderFarmerResult,\n      source: 'Spider Farmer App'\n    };\n  }\n\n  // Could add other app parsers here in the future\n  return {\n    ...spiderFarmerResult,\n    source: 'Unknown',\n    message: 'Could not parse environmental data from image. Please ensure the image shows clear readings from a supported app.'\n  };\n};","map":{"version":3,"names":["Tesseract","parseSpiderFarmerScreenshot","imageFile","data","text","recognize","logger","m","console","log","tessedit_char_whitelist","result","temperature","humidity","ph","co2","vpd","ppfd","success","parsedValues","lines","split","map","line","trim","filter","length","numberPattern","allNumbers","match","exec","number","parseFloat","index","contextBefore","substring","Math","max","toLowerCase","contextAfter","min","push","value","fullContext","num","context","includes","hasPercentage","hasHumidityKeyword","notTemperature","notVPD","sortedNumbers","sort","a","b","n","tempCandidate","find","humidCandidate","reverse","humidCandidate2","candidate","vpdCandidate","co2Match","val","numIndex","indexOf","surrounding","ppfdMatch","phMatch","Object","values","some","error","message","preprocessImageForOCR","canvas","imageData","getImageData","width","height","i","gray","contrast","putImageData","toDataURL","parseEnvironmentalData","spiderFarmerResult","source"],"sources":["/home/dmans218/projects/Growlogger/frontend/src/utils/ocrParser.js"],"sourcesContent":["import Tesseract from 'tesseract.js';\n\n// Parse environmental data from Spider Farmer app screenshot\nexport const parseSpiderFarmerScreenshot = async (imageFile) => {\n  try {\n    const { data: { text } } = await Tesseract.recognize(imageFile, 'eng', {\n      logger: m => console.log(m),\n      tessedit_char_whitelist: '0123456789.°C%kPa ppm μmol/s-+:VPDCOTemperatureHumidityAir ',\n    });\n\n    console.log('OCR Raw Text:', text);\n\n    // Initialize result object\n    const result = {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      parsedValues: {}\n    };\n\n    // Clean text for better analysis\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    console.log('Text lines:', lines);\n\n    // Extract all numbers with context for smarter parsing\n    const numberPattern = /(\\d+\\.?\\d*)/g;\n    const allNumbers = [];\n    let match;\n    while ((match = numberPattern.exec(text)) !== null) {\n      const number = parseFloat(match[1]);\n      const index = match.index;\n      const contextBefore = text.substring(Math.max(0, index - 20), index).toLowerCase();\n      const contextAfter = text.substring(index, Math.min(text.length, index + 20)).toLowerCase();\n      allNumbers.push({\n        value: number,\n        text: match[1],\n        index: index,\n        contextBefore: contextBefore,\n        contextAfter: contextAfter,\n        fullContext: contextBefore + match[1] + contextAfter\n      });\n    }\n    \n    console.log('Numbers with context:', allNumbers);\n\n    // Parse Temperature - look for temperature in proper range with °C\n    for (const num of allNumbers) {\n      if (!result.temperature && num.value >= 15 && num.value <= 40) {\n        const context = num.fullContext;\n        // Check if it's near temperature indicators and has degree symbol\n        if ((context.includes('temp') || context.includes('air')) && \n            (context.includes('°') || context.includes('º')) &&\n            !context.includes('vpd') && !context.includes('%')) {\n          result.temperature = num.value;\n          result.parsedValues.temperature = `${num.value}°C`;\n          console.log('Found temperature:', num.value, 'Context:', context);\n          break;\n        }\n      }\n    }\n\n    // Parse Humidity - look for percentage values in humidity range\n    for (const num of allNumbers) {\n      if (!result.humidity && num.value >= 20 && num.value <= 100) {\n        const context = num.fullContext;\n        // Check if it's clearly marked as percentage or near humidity keywords\n        // Prioritize numbers that have % directly after them\n        const hasPercentage = context.includes('%');\n        const hasHumidityKeyword = context.includes('humid');\n        const notTemperature = !context.includes('°') && !context.includes('temp');\n        const notVPD = !context.includes('vpd') && !context.includes('kpa');\n        \n        if (hasPercentage && notTemperature && notVPD) {\n          result.humidity = num.value;\n          result.parsedValues.humidity = `${num.value}%`;\n          console.log('Found humidity:', num.value, 'Context:', context);\n          break;\n        } else if (hasHumidityKeyword && notTemperature && notVPD) {\n          result.humidity = num.value;\n          result.parsedValues.humidity = `${num.value}%`;\n          console.log('Found humidity by keyword:', num.value, 'Context:', context);\n          break;\n        }\n      }\n    }\n\n    // Parse VPD - look for small decimal values with kPa context  \n    for (const num of allNumbers) {\n      if (!result.vpd && num.value >= 0.1 && num.value <= 5.0) {\n        const context = num.fullContext;\n        // VPD should be small decimal near \"VPD\" text or \"kPa\"\n        if (context.includes('vpd') || \n            (context.includes('kpa') && num.value < 10) ||\n            (num.value < 2.0 && context.includes('kpa'))) {\n          result.vpd = num.value;\n          result.parsedValues.vpd = `${num.value} kPa`;\n          console.log('Found VPD:', num.value, 'Context:', context);\n          break;\n        }\n      }\n    }\n\n    // Fallback parsing if direct context matching fails\n    if (!result.temperature || !result.humidity || !result.vpd) {\n      console.log('Using fallback parsing...');\n      \n      // Sort numbers by value to help identify them\n      const sortedNumbers = [...allNumbers].sort((a, b) => a.value - b.value);\n      console.log('Sorted numbers:', sortedNumbers.map(n => n.value));\n      \n      // If we don't have temperature, look for number around 20-25 (room temp)\n      if (!result.temperature) {\n        const tempCandidate = sortedNumbers.find(n => n.value >= 18 && n.value <= 30);\n        if (tempCandidate && !tempCandidate.fullContext.includes('%')) {\n          result.temperature = tempCandidate.value;\n          result.parsedValues.temperature = `${tempCandidate.value}°C`;\n          console.log('Fallback temperature:', tempCandidate.value);\n        }\n      }\n      \n             // If we don't have humidity, look for numbers with % symbol, prioritizing higher values\n       if (!result.humidity) {\n         // First try to find numbers with % that are in typical humidity range (50-90%)\n         const humidCandidate = sortedNumbers.reverse().find(n => \n           n.value >= 50 && n.value <= 100 && \n           n.fullContext.includes('%') &&\n           !n.fullContext.includes('°') &&\n           !n.fullContext.includes('vpd') &&\n           !n.fullContext.includes('kpa')\n         );\n         \n         // If not found, try broader range (30-100%)\n         const humidCandidate2 = humidCandidate || sortedNumbers.find(n => \n           n.value >= 30 && n.value <= 100 && \n           n.fullContext.includes('%') &&\n           !n.fullContext.includes('°')\n         );\n         \n         if (humidCandidate || humidCandidate2) {\n           const candidate = humidCandidate || humidCandidate2;\n           result.humidity = candidate.value;\n           result.parsedValues.humidity = `${candidate.value}%`;\n           console.log('Fallback humidity:', candidate.value, 'Context:', candidate.fullContext);\n         }\n       }\n      \n      // If we don't have VPD, look for small decimals\n      if (!result.vpd) {\n        const vpdCandidate = sortedNumbers.find(n => \n          n.value >= 0.1 && n.value <= 2.0 && \n          n.text.includes('.')\n        );\n        if (vpdCandidate) {\n          result.vpd = vpdCandidate.value;\n          result.parsedValues.vpd = `${vpdCandidate.value} kPa`;\n          console.log('Fallback VPD:', vpdCandidate.value);\n        }\n      }\n    }\n\n        // Parse CO2 (ppm pattern)\n    let co2Match = text.match(/co\\s*[₂2]?\\s*[:-]?\\s*(\\d+)/i) || \n                     text.match(/(\\d+)\\s*ppm/i);\n    \n    // Look for numbers in CO2 range\n    if (!co2Match && allNumbers.length > 0) {\n      for (const num of allNumbers) {\n        const val = parseFloat(num);\n        if (val >= 300 && val <= 2000) { // Typical CO2 range\n          const numIndex = text.indexOf(num);\n          const surrounding = text.substring(Math.max(0, numIndex - 15), numIndex + 15).toLowerCase();\n          if (surrounding.includes('co2') || surrounding.includes('ppm')) {\n            co2Match = [null, num];\n            break;\n          }\n        }\n      }\n    }\n    \n    if (co2Match) {\n      result.co2 = parseFloat(co2Match[1]);\n      result.parsedValues.co2 = `${co2Match[1]} ppm`;\n    }\n\n        // Parse PPFD (μmol pattern)\n    let ppfdMatch = text.match(/ppfd\\s*[:-]?\\s*(\\d+)/i) ||\n                      text.match(/(\\d+)\\s*[μu]mol/i);\n    \n    // Look for numbers in PPFD range\n    if (!ppfdMatch && allNumbers.length > 0) {\n      for (const num of allNumbers) {\n        const val = parseFloat(num);\n        if (val >= 100 && val <= 2000) { // Typical PPFD range\n          const numIndex = text.indexOf(num);\n          const surrounding = text.substring(Math.max(0, numIndex - 15), numIndex + 15).toLowerCase();\n          if (surrounding.includes('ppfd') || surrounding.includes('μmol') || surrounding.includes('umol')) {\n            ppfdMatch = [null, num];\n            break;\n          }\n        }\n      }\n    }\n    \n    if (ppfdMatch) {\n      result.ppfd = parseFloat(ppfdMatch[1]);\n      result.parsedValues.ppfd = `${ppfdMatch[1]} μmol/m²/s`;\n    }\n\n    // Parse pH\n    let phMatch = text.match(/ph\\s*[:-]?\\s*(\\d+\\.?\\d*)/i);\n    if (!phMatch && allNumbers.length > 0) {\n      for (const num of allNumbers) {\n        const val = parseFloat(num);\n        if (val >= 4.0 && val <= 9.0) { // Typical pH range\n          const numIndex = text.indexOf(num);\n          const surrounding = text.substring(Math.max(0, numIndex - 10), numIndex + 10).toLowerCase();\n          if (surrounding.includes('ph')) {\n            phMatch = [null, num];\n            break;\n          }\n        }\n      }\n    }\n    \n    if (phMatch) {\n      result.ph = parseFloat(phMatch[1]);\n      result.parsedValues.ph = phMatch[1];\n    }\n\n    // Check if we found at least one value\n    result.success = Object.values(result).some(val => val !== null && typeof val === 'number');\n\n    console.log('Parsed result:', result);\n    return result;\n  } catch (error) {\n    console.error('OCR Error:', error);\n    return {\n      temperature: null,\n      humidity: null,\n      ph: null,\n      co2: null,\n      vpd: null,\n      ppfd: null,\n      success: false,\n      error: error.message,\n      parsedValues: {}\n    };\n  }\n};\n\n// Helper function to preprocess image for better OCR\nexport const preprocessImageForOCR = (canvas, context) => {\n  const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  // Convert to grayscale and increase contrast\n  for (let i = 0; i < data.length; i += 4) {\n    const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;\n    \n    // Increase contrast (simple threshold)\n    const contrast = gray > 128 ? 255 : 0;\n    \n    data[i] = contrast;     // Red\n    data[i + 1] = contrast; // Green\n    data[i + 2] = contrast; // Blue\n  }\n\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL();\n};\n\n// Parse different app layouts/formats\nexport const parseEnvironmentalData = async (imageFile) => {\n  // Try Spider Farmer format first\n  const spiderFarmerResult = await parseSpiderFarmerScreenshot(imageFile);\n  \n  if (spiderFarmerResult.success) {\n    return {\n      ...spiderFarmerResult,\n      source: 'Spider Farmer App'\n    };\n  }\n\n  // Could add other app parsers here in the future\n  return {\n    ...spiderFarmerResult,\n    source: 'Unknown',\n    message: 'Could not parse environmental data from image. Please ensure the image shows clear readings from a supported app.'\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}